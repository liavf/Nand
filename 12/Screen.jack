// This file is part of nand2tetris, as taught in The Hebrew University, and
// was written by Aviv Yaish. It is an extension to the specifications given
// [here](https://www.nand2tetris.org) (Shimon Schocken and Noam Nisan, 2017),
// as allowed by the Creative Common Attribution-NonCommercial-ShareAlike 3.0
// Unported [License](https://creativecommons.org/licenses/by-nc-sa/3.0/).

/**
 * A library of functions for displaying graphics on the screen.
 * The Hack physical screen consists of 256 rows (indexed 0..255, top to bottom)
 * of 512 pixels each (indexed 0..511, left to right). The top left pixel on 
 * the screen is indexed (0,0).
 */
class Screen {
        static int baseAddress;
        static boolean color;
        static Array twoToThe16;

        /** Initializes the Screen. */
        function void init() {
            var int i, power;
            let baseAddress = 16384; // 16384 = 0x4000
            let color = true; // true = black, false = white
            let twoToThe16 = Array.new(16);
            let power = 1;
            let i = 0;
            while (i < 16) {
                let twoToThe16[i] = power;
                let power = power + power;
                let i = i + 1;
            }
            return;
        }

        /** Erases the entire screen. */
        function void clearScreen() {
            var int i;
            let i = 0;
            while (i < 8192) {
                do Memory.poke(baseAddress + i, 0);
                let i = i + 1;
            }
            return;
        }

        /** Sets the current color, to be used for all subsequent drawXXX commands.
         *    Black is represented by true, white by false. */
        function void setColor(boolean b) {
            let color = b;
            return;
        }

        /** Draws the (x,y) pixel, using the current color. */
        function void drawPixel(int x, int y) {
            // For this function, you will need to calculate the value x%16.
            // It should be calculated quickly without using multiplication or
            // division, using exactly one basic math/logical operation.
            // In addition, calculating 16384 + y * 32 + x/16 should not use
            // division or multiplication.
            // Pseudocode:
            // 1. Compute the RAM address where the (x,y) pixel is
            //    represented: 16384 + (32*y) + (x/16).
            // 2. Use Memory.peek to get the 16-bit value of this address
            // 3. Use some bitwise operation to set (only) the bit that corresponds
            //    to the pixel to the current color.
            // 4. Use Memory.poke to write the modified 16-bit value to the RAM
            // address.
            var int address, value, i, mask;
            let address = 16384 + (32*y) + (x/16);
            let value = Memory.peek(address);
            let i = x-(16*(x/16)); // modulu 16
            let mask = twoToThe16[i];
            if (color) {
                let value = value | mask;
            } else {
                let value = value & mask;
            }
            do Memory.poke(address, value);
            return;
        }


        /** Draws a line from pixel (x1,y1) to pixel (x2,y2), using the current color. */
        function void drawLine(int x1, int y1, int x2, int y2) {
            // The case where x1 != x2 and y1 != y2 should be implemented without
            // multiplication or division.
            // Pseudocode:
            // 1. let x = x1, y = y1, a = 0, b = 0, diff = 0
            // 2. Compute dx and dy
            // 3. while ((a <= dx) and (b <= dy))
            // 4.   do drawPixel(x+a, y+b)
            // 5.   if (diff < 0) { let a=a+1, diff=diff+dy }
            // 6.   else          { let b=b+1, diff=diff-dx }
            //
            // The case where y1 == y2 can be implemented efficiently by
            // trying to draw as many pixels as possible in a single assignment,
            // similarly to Fill in project 4.
            var int x, y, a, b, diff, dx, dy, direction;

            if (y1 = y2) {
                do Screen.drawHorizontal(x1, x2, y1);
                return;
            }

            if (x1 = x2) {
                do Screen.drawVertical(x1, y1, y2);
                return;
            }

            if (((x1<x2) & (y2<y1)) | ((x1>x2) & (y2>y1))) {
                let x = Math.min(x1, x2);
                let y = Math.max(y1, y2);
                let direction = 1;
            }

            else {
                let x = Math.min(x1, x2);
                let y = Math.min(y1, y2);
                let direction = -1;
            }

            let a = 0;
            let b = 0;
            let diff = 0;
            let dx = Math.abs(x2-x1);
            let dy = Math.abs(y2-y1);

            while ((~(a > dx)) & (~(b > dy))) {
                do Screen.drawPixel(x+a, y-b);
                if (diff < 0) {
                    let a = a+1;
                    let diff = diff+(dy);
                } else {
                    let b = b+direction;
                    let diff = diff-dx;
                }
            }
            return;
        }

        function void drawHorizontal(int x1, int x2, int y) {
            var int i;
            let i = Math.min(x1, x2);
            while (i < Math.max(x1, x2)) {
                do Screen.drawPixel(i, y);
                let i = i + 1;
            }
            return;
        }

        function void drawVertical(int x, int y1, int y2) {
            var int i;
            let i = Math.min(y1, y2);
            while (i < Math.max(y1, y2)) {
                do Screen.drawPixel(x, i);
                let i = i + 1;
            }
            return;
        }

        /** Draws a filled rectangle whose top left corner is (x1, y1)
         * and bottom right corner is (x2,y2), using the current color. */
        function void drawRectangle(int x1, int y1, int x2, int y2) {
            var int minX, minY, maxX, maxY;
            let minX = Math.min(x1, x2);
            let minY = Math.min(y1, y2);
            let maxX = Math.max(x1, x2);
            let maxY = Math.max(y1, y2);
            while (~(minY > maxY)) {
                do Screen.drawHorizontal(minX, maxX, minY);
                let minY = minY + 1;
            }
            return;
            
        }

        /** Draws a filled circle of radius r<=181 around (x,y), using the current color. */
        function void drawCircle(int x, int y, int r) {
            // This can be implemented efficiently by drawing multiple lines at
            // each iteration. You can use multiplication and sqrt.
            // Pseudocode:
            // 1. for (dy = -r ... r)
            // 2.   let halfWidth = sqrt(r*r - dy*dy)
            // 3.   do drawLine(x-halfWidth, y+dy, x+halfWidth, y+dy)
            var int dy, halfWidth;
            let dy = -r;
            while (~(dy > r)) {
                let halfWidth = Math.sqrt(Math.abs((r*r) - (dy*dy)));
                do Screen.drawHorizontal(x-halfWidth, x+halfWidth, y+dy);
                let dy = dy + 1;
            }
            return;
        }
}
