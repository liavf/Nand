// This file is part of nand2tetris, as taught in The Hebrew University, and
// was written by Aviv Yaish. It is an extension to the specifications given
// [here](https://www.nand2tetris.org) (Shimon Schocken and Noam Nisan, 2017),
// as allowed by the Creative Common Attribution-NonCommercial-ShareAlike 3.0
// Unported [License](https://creativecommons.org/licenses/by-nc-sa/3.0/).

/**
 * A library of commonly used mathematical functions.
 * Note: Jack compilers implement multiplication and division using OS method calls.
 */
class Math {
        /** Initializes the library. */
        static Array twoToThe16;

        function void init() {
            var int i, power;
            let twoToThe16 = Array.new(16);
            let power = 1;
            let i = 0;
            while (i < 16) {
                let twoToThe16[i] = power;
                let power = power + power;
                let i = i + 1;
            }
            return;
        }

        function boolean bit(int x, int i) {
            if (x & twoToThe16[i] = twoToThe16[i]) {
                return true;
            }
            else {
                return false;
            }
        }

        /** Returns the absolute value of x. */
        function int abs(int x) {
            if (x < 0) {
                let x = -x;
            }
            return x;
        }

        /** 
         * Returns the product of x and y. 
         * When a Jack compiler detects the multiplication operator '*' in the 
         * program's code, it handles it by invoking this method. In other words,
         * the Jack expressions x*y and multiply(x,y) return the same value.
         */
        function int multiply(int x, int y) {
            // Pseudocode:
            // 1. let sum = 0
            // 2. let shiftedx = x
            // 3. for i = 0 ... n-1 do
            // 4.   if ((i-th bit of y) == 1)
            // 5.      let sum = sum + shiftedx
            // 6.   let shiftedx = 2*shiftedx
            // 7. return sum

            var int sum, shiftedx, i;
            let sum = 0;
            let shiftedx = x;
            let i = 0;
            while (i < 16) {
                if (Math.bit(y, i)) {
                    let sum = sum + shiftedx;
                }
                let shiftedx = shiftedx + shiftedx;
                let i = i + 1;
            }
            return sum;
        }

        function int divide_pos(int x, int y) {
            var int q;
            if ((y > x) | (y < 0)) {
                return 0;
            }
            let q = Math.divide(x, 2*y);
            if ((x - (2*q*y)) < y) {
                return 2*q;
            }
            else {
                return (2*q) + 1;
            }
        }

        /** 
         * Returns the integer part of x/y.
         * When a Jack compiler detects the multiplication operator '/' in the 
         * program's code, it handles it by invoking this method. In other words,
         * the Jack expressions x/y and divide(x,y) return the same value.
         */
        function int divide(int x, int y) {
            // This should be implemented without using multiplication.
            // Hint: updating the value of 2*q*y in the "if" statement requires
            // at most a single addition operator at every recursion step.
            // Pseudocode:
            // 1. if (y > x) return 0
            // 2. let q = divide(x, 2*y)
            // 3. if ((x - 2*q*y) < y)
            // 4.   return 2*q
            // 5. else
            // 6.   return 2*q + 1

            if (((x > 0) & (y > 0)) | ((x < 0) & (y < 0))) {
                return Math.divide_pos(Math.abs(x), Math.abs(y));
            }
            else {
                return -(Math.divide_pos(Math.abs(x), Math.abs(y)));
            }
        }

        /** Returns the integer part of the square root of x. */
        function int sqrt(int x) {
            // This should be implemented without using multiplication or division.
            // Pseudocode (where '**' is the mathematical power function):
            // 1. let y = 0
            // 2. for j = (n/2 - 1) ... 0 do
            // 3.   if ((y + 2**j)**2 <= x) then let y = y + 2**j
            // 4. return y
            var int y, j, temp1, temp2;
            let y = 0;
            let j = 7;
            while (~(j < 0)) {
                let temp1 = y + twoToThe16[j];
                let temp2 = Math.multiply(temp1, temp1);
                if ((~(temp2 > x)) & (temp2 > 0)) {
                    let y = temp1;
                }
                let j = j - 1;
            }
            return y;

        }

        /** Returns the greater number. */
        function int max(int a, int b) {
            if (a > b) {
                return a;
            }
            else {
                return b;
            }
        }

        /** Returns the smaller number. */
        function int min(int a, int b) {
            if (a < b) {
                return a;
            }
            else {
                return b;
            }
        }
}
